// <auto-generated />
using Conduit.Db.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Conduit.Db.Migrations
{
    [DbContext(typeof(ConduitContext))]
    [Migration("20230615163603_SeedingData")]
    partial class SeedingData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Conduit.API.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "The most visited urban park in the United States.",
                            Tag = "#central_Park",
                            Title = "Central Park",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Body = "A 102-story skyscraper located in Midtown Manhattan.",
                            Tag = "#Empire_State_Building",
                            Title = "Empire State Building",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Body = "A Gothic style cathedral, conceived by architects Jan and Pieter Appelmans.",
                            Tag = "#Cathedral",
                            Title = "Cathedral",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Body = "The the finest example of railway architecture in Belgium.",
                            Tag = "#Central_Station",
                            Title = "Antwerp Central Station",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            Body = "A wrought iron lattice tower on the Champ de Mars, named after engineer Gustave Eiffel.",
                            Tag = "#Eiffel_Tower",
                            Title = "Eiffel Tower",
                            UserId = 3
                        },
                        new
                        {
                            Id = 6,
                            Body = "The world's largest museum.",
                            Tag = "#Louvre",
                            Title = "The Louvre",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Conduit.API.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            Body = "This is beautiful article",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 3,
                            Body = "Amazing!",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ArticleId = 5,
                            Body = "Eiffel Tower is the best",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            ArticleId = 6,
                            Body = "I love this museum",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Conduit.API.Entities.FavoriteArticle", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ArticleId");

                    b.HasIndex("ArticleId");

                    b.ToTable("FavoriteArticles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ArticleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            ArticleId = 3
                        },
                        new
                        {
                            UserId = 3,
                            ArticleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            ArticleId = 2
                        });
                });

            modelBuilder.Entity("Conduit.API.Entities.Follow", b =>
                {
                    b.Property<int>("FollowerId")
                        .HasColumnType("int");

                    b.Property<int>("FolloweeId")
                        .HasColumnType("int");

                    b.HasKey("FollowerId", "FolloweeId");

                    b.HasIndex("FolloweeId");

                    b.ToTable("Follows");

                    b.HasData(
                        new
                        {
                            FollowerId = 1,
                            FolloweeId = 2
                        },
                        new
                        {
                            FollowerId = 1,
                            FolloweeId = 3
                        },
                        new
                        {
                            FollowerId = 2,
                            FolloweeId = 1
                        },
                        new
                        {
                            FollowerId = 2,
                            FolloweeId = 3
                        },
                        new
                        {
                            FollowerId = 3,
                            FolloweeId = 4
                        });
                });

            modelBuilder.Entity("Conduit.API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "lenasama7a@gmail.com",
                            Password = "13579L$l",
                            UserName = "lenaSamaha"
                        },
                        new
                        {
                            Id = 2,
                            Email = "saulBellow@gmail.com",
                            Password = "246810Saul%",
                            UserName = "saulBellow"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "I'm From Italy",
                            Email = "SidneySheldon@gmail.com",
                            Password = "Sidney1&",
                            UserName = "SidneySheldon"
                        },
                        new
                        {
                            Id = 4,
                            Email = "ErnestHemingway@gmail.com",
                            Password = "12246E-r",
                            UserName = "ErnestHemingway"
                        });
                });

            modelBuilder.Entity("Conduit.API.Entities.Article", b =>
                {
                    b.HasOne("Conduit.API.Entities.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Conduit.API.Entities.Comment", b =>
                {
                    b.HasOne("Conduit.API.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Conduit.API.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Conduit.API.Entities.FavoriteArticle", b =>
                {
                    b.HasOne("Conduit.API.Entities.Article", "Article")
                        .WithMany("FavoriteArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Conduit.API.Entities.User", "User")
                        .WithMany("FavoriteArticles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Conduit.API.Entities.Follow", b =>
                {
                    b.HasOne("Conduit.API.Entities.User", "Followee")
                        .WithMany("Followees")
                        .HasForeignKey("FolloweeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Conduit.API.Entities.User", "Follower")
                        .WithMany("Followers")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Followee");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Conduit.API.Entities.Article", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavoriteArticles");
                });

            modelBuilder.Entity("Conduit.API.Entities.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Comments");

                    b.Navigation("FavoriteArticles");

                    b.Navigation("Followees");

                    b.Navigation("Followers");
                });
#pragma warning restore 612, 618
        }
    }
}
